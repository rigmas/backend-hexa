openapi: 3.0.0
info:
  version: 0.0.1
  title: 'Swagger Docs'
  description: 'backend'
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://localhost:80'
  - description: Local development
    url: 'http://localhost:3000/api'
paths:
  /:
    get:
      tags:
        - root
      operationId: getRoot
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
  /healthcheck:
    get:
      tags:
        - healthcheck1
      operationId: getHealthCheck
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
  /healthcheck/liveness:
    get:
      tags:
        - healthcheck
      operationId: getLiveness
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /healthcheck/readiness:
    get:
      tags:
        - healthcheck
      operationId: getReadiness
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /users:
    post:
      tags:
        - user
      operationId: addUser
      requestBody:
        description: |
          - firstName must be string and not null (User's first name)
          - lastName must be string and not null (User's last name)
          - address must be string and not null (User's address)
          - isActive must be boolean and not null (Indicates whether the user is active or not)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: Create a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    get:
      tags:
        - user
      description: |
        return all user
      operationId: getAllUser
      parameters:
        - name: limit
          in: query
          description: maximum number of users to return
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 10
        - name: offset
          in: query
          description: number of users to skip (for pagination)
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 10
      responses:
        200:
          description: Return all user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags:
        - user
      description: |
        return user detail
      operationId: userDetail
      parameters:
        - name: id
          in: path
          description: ID for user detail
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return user detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidIDResponse'
    put:
      tags:
        - user
      description: |
        update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID for update user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User detail updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
    delete:
      tags:
        - user
      description: |
        delete user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID for delete user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User has been removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'

  /error/{error_code}:
    get:
      tags:
        - error
        - example
      operationId: getErrorExample
      parameters:
        - name: error_code
          in: path
          description: Error HTTP code
          required: true
          schema:
            type: string
            enum: ['200', '400', '403', '422', '500']
      responses:
        200:
          description: default response, instruction to use this endpoint
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        403:
          description: example error 403 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        422:
          description: example error 422 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error422Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

components:
  schemas:
    Healthcheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: 'OK'
    Root:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'OK'
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - address
        - isActive
      properties:
        id:
          type: number
          example: 11
        firstName:
          type: string
          example: 'Carl'
        lastName:
          type: string
          example: 'Sagan'
        address:
          type: string
          example: 'Cosmos'
        isActive:
          type: boolean
          example: true
    UserRequest:
      type: object
      required:
        - firstName
        - lastName
        - address
        - isActive
      properties:
        firstName:
          type: string
          example: 'Carl'
        lastName:
          type: string
          example: 'Sagan'
        address:
          type: string
          example: 'Cosmos'
        isActive:
          type: boolean
          example: true

    UserUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          example: 'Carl'
        lastName:
          type: string
          example: 'Sagan'
        address:
          type: string
          example: 'Cosmos'
        isActive:
          type: boolean
          example: true

    ErrorInvalidIDResponse:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - API_VALIDATION_ERROR
        message:
          type: string
    Error400Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - API_VALIDATION_ERROR
            - CREDIT_CARD_DATA_ERROR
            - INVALID_JSON_FORMAT
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error403Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - REQUEST_FORBIDDEN_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error404Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - USER_NOT_FOUND
            - CREDIT_CARD_CHARGE_NOT_FOUND_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error422Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - GENERATE_CHECKOUT_URL_ERROR
            - DUPLICATE_PAYMENT_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error500Response:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: string
          enum:
            - INTERNAL_SERVER_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    ArrayOfErrors:
      nullable: true
      type: array
      items:
        oneOf:
          - type: string
          - type: object
  parameters:
    clientVersion:
      in: header
      name: client-version
      description: The requester's client version used to access this service
      schema:
        type: string
        example: 'v1.0.0'
      required: true
    teamName:
      in: header
      name: team-name
      description: The requester's team [link](https://docs.google.com/document/d/1Bvs1A7VJwribkS9WM-s96ikXxgNa0fZrvLyLrIH811s/edit#heading=h.msfrxiz473dv)
      schema:
        type: string
        example: disbursement
      required: true
    serviceName:
      in: header
      name: service-name
      description: The requester's service name
      schema:
        type: string
        example: disbursement-service
      required: true
